#!/bin/bash
python main.py "$@"

# Group Members: 
#     Midhun Sadanand
#     Raymond Hou
#     Daniel Liu

# How to Run the Test Script
    # 1. run "make" in terminal
    # 2. Usage: ./FinalProj [connectfour|nim|dotsandboxes] [small/medium/large] [initial/random] [cmp1/cmp2/cmp3/cmp4/cmp5]

# Brief Description of Final Project
#     Our final project compares the performance of a minimax algorithm using 5 different comparison agents, which are combinations of
#     minimax, alpha-beta pruning, transposition table storage, and SCOUT, to solve small, medium, and large state space configurations of 
#     Connect Four, 3-row Nim, and simplified Dots and Boxes. 
#     We measure node evaluations and compute time.

# What Our Code Does
    # 1. argument parsing based on user input that specifies game, state space size, initial or random board configuration, which comparison agent to use against baseline minimax
    # 2. minimax:
    # 3. alpha-beta pruning:
    # 4. transposition table:
    # 5. scout

# Research Question
#     How much more efficient does alpha-beta pruning, SCOUT (with re-search), and/or transposition tables 
#     make the minimax algorithm when calculating the best move for the following 3 games?
#         Connect Four
#         Nim
#         Dots and Boxes
#     And how do these improvements scale with increasingly large state spaces?

# Results (for initial state)
#     todo:
